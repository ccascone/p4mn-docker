language: generic

services:
  - docker

env:
  global:
    - CACHE_DIR: $HOME/.cache/docker
    - GRPC_VER: 1.19.1
    - STABLE_PI_COMMIT: 9f6c1f2
    - STABLE_BMV2_COMMIT: 8c6f852
    - LATEST_PI_COMMIT: "`wget -qO- http://api.github.com/repos/p4lang/PI/commits/master | grep -m1 '\"sha\"' | cut -d '\"' -f4 | cut -c1-7`"
    - LATEST_BMV2_COMMIT: "`wget -qO- http://api.github.com/repos/p4lang/behavioral-model/commits/master | grep -m1 '\"sha\"' | cut -d '\"' -f4 | cut -c1-7`"
    - PI_CONFIGURE_FLAGS: "'--with-proto'"
  matrix:
    - TAGNAME: latest
      PI_COMMIT: $LATEST_PI_COMMIT
      BMV2_COMMIT: $LATEST_BMV2_COMMIT
      BMV2_CONFIGURE_FLAGS: "'--with-pi --disable-elogger --without-nanomsg --without-thrift'"
      TRAVIS_ALLOW_FAILURE: true
    - TAGNAME: latest-no-logging
      PI_COMMIT: $LATEST_PI_COMMIT
      BMV2_COMMIT: $LATEST_BMV2_COMMIT
      BMV2_CONFIGURE_FLAGS: "'--with-pi --disable-elogger --without-nanomsg --without-thrift --disable-logging-macros'"
      TRAVIS_ALLOW_FAILURE: true
    - TAGNAME: stable
      PI_COMMIT: $STABLE_PI_COMMIT
      BMV2_COMMIT: $STABLE_BMV2_COMMIT
      BMV2_CONFIGURE_FLAGS: "'--with-pi --disable-elogger --without-nanomsg --without-thrift'"
      TRAVIS_ALLOW_FAILURE: false
    - TAGNAME: stable-no-logging
      PI_COMMIT: $STABLE_PI_COMMIT
      BMV2_COMMIT: $STABLE_BMV2_COMMIT
      BMV2_CONFIGURE_FLAGS: "'--with-pi --disable-elogger --without-nanomsg --without-thrift --disable-logging-macros'"
      TRAVIS_ALLOW_FAILURE: false

cache:
  directories:
  - $CACHE_DIR

before_install:
  - export RUNTIME_IMAGE_NAME=p4mn-$TAGNAME
  - export BUILDER_IMAGE_NAME=$RUNTIME_IMAGE_NAME-builder
  - export CACHE_BUILDER_IMAGE=$CACHE_DIR/$BUILDER_IMAGE_NAME.tar
  - export CACHE_RUNTIME_IMAGE=$CACHE_DIR/$RUNTIME_IMAGE_NAME.tar
  - export DOCKER_BUILD_ARGS="--build-arg GRPC_VER=$GRPC_VER --build-arg PI_COMMIT=$PI_COMMIT --build-arg BMV2_COMMIT=$BMV2_COMMIT --build-arg PI_CONFIGURE_FLAGS='$PI_CONFIGURE_FLAGS' --build-arg BMV2_CONFIGURE_FLAGS='$BMV2_CONFIGURE_FLAGS'"

install:
  - docker pull $DOCKER_REPO:$TAGNAME-builder
  - if [ -f $CACHE_BUILDER_IMAGE ]; then docker load -i $CACHE_BUILDER_IMAGE; fi
  - if [ -f $CACHE_RUNTIME_IMAGE ]; then docker load -i $CACHE_RUNTIME_IMAGE; fi

script:
  # Build images. Without eval, build args are not escaped properly.
  - eval "docker build --target builder --cache-from $DOCKER_REPO:$TAGNAME-builder -t $BUILDER_IMAGE_NAME $DOCKER_BUILD_ARGS ." || travis_terminate 1
  - eval "docker build --target runtime --cache-from $BUILDER_IMAGE_NAME -t $RUNTIME_IMAGE_NAME $DOCKER_BUILD_ARGS ." || travis_terminate 1
  # Test that all shared objects are present.
  - docker run --rm --entrypoint simple_switch_grpc $RUNTIME_IMAGE_NAME --help || travis_terminate 1
  - docker run --rm --entrypoint mn $RUNTIME_IMAGE_NAME --help || travis_terminate 1
  # Update cache.
  - mkdir -p $CACHE_DIR
  - rm -f $CACHE_BUILDER_IMAGE
  - rm -f $CACHE_RUNTIME_IMAGE
  - docker save -o $CACHE_BUILDER_IMAGE $BUILDER_IMAGE_NAME
  - docker save -o $CACHE_RUNTIME_IMAGE $RUNTIME_IMAGE_NAME

deploy:
  provider: script
  script: bash docker_push
  on:
    branch: master